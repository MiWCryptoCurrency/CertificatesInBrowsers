# HG changeset patch
# User MiW CryptoCurrency <MiWCryptoCurrency@gmail.com>
# Parent  2a193b7f395c8e6f3c21e83777ce2f540e4c04fe

diff --git a/security/nss/cmd/bltest/blapitest.c b/security/nss/cmd/bltest/blapitest.c
--- a/security/nss/cmd/bltest/blapitest.c
+++ b/security/nss/cmd/bltest/blapitest.c
@@ -154,17 +154,18 @@ static void Usage()
     PRINTUSAGE("",  "",   "  nistp521, prime192v1, prime192v2, prime192v3,");
     PRINTUSAGE("",  "",   "  prime239v1, prime239v2, prime239v3, c2pnb163v1,");
     PRINTUSAGE("",  "",   "  c2pnb163v2, c2pnb163v3, c2pnb176v1, c2tnb191v1,");
     PRINTUSAGE("",  "",   "  c2tnb191v2, c2tnb191v3, c2onb191v4, c2onb191v5,");
     PRINTUSAGE("",  "",   "  c2pnb208w1, c2tnb239v1, c2tnb239v2, c2tnb239v3,");
     PRINTUSAGE("",  "",   "  c2onb239v4, c2onb239v5, c2pnb272w1, c2pnb304w1,");
     PRINTUSAGE("",  "",   "  c2tnb359w1, c2pnb368w1, c2tnb431r1, secp112r1,");
     PRINTUSAGE("",  "",   "  secp112r2, secp128r1, secp128r2, sect113r1, sect113r2,");
-    PRINTUSAGE("",  "",   "  sect131r1, sect131r2");
+    PRINTUSAGE("",  "",   "  sect131r1, sect131r2, brainpoolP256r1, brainpoolP384r1,");
+    PRINTUSAGE("",  "",   "  brainpoolP512r1\n");
 #endif
     PRINTUSAGE("",	"-p", "do performance test");
     PRINTUSAGE("",	"-4", "run test in multithread mode. th_num number of parallel threads");
     PRINTUSAGE("",	"-5", "run test for specified time interval(in seconds)");
     fprintf(stderr, "\n");
     PRINTUSAGE(progName, "-V -m mode", "Verify a signed buffer");
     PRINTUSAGE("",	"", "[-i plaintext] [-s signature] [-k key]");
     PRINTUSAGE("",	"", "[-p repetitions | -5 time_interval] [-4 th_num]");
@@ -417,17 +418,17 @@ eckey_from_filedata(SECItem *filedata)
     return key;
 }
 
 typedef struct curveNameTagPairStr {
     char *curveName;
     SECOidTag curveOidTag;
 } CurveNameTagPair;
 
-#define DEFAULT_CURVE_OID_TAG  SEC_OID_SECG_EC_SECP192R1
+#define DEFAULT_CURVE_OID_TAG  SEC_OID_SECG_EC_SECP256R1
 /* #define DEFAULT_CURVE_OID_TAG  SEC_OID_SECG_EC_SECP160R1 */
 
 static CurveNameTagPair nameTagPair[] =
 { 
   { "sect163k1", SEC_OID_SECG_EC_SECT163K1},
   { "nistk163", SEC_OID_SECG_EC_SECT163K1},
   { "sect163r1", SEC_OID_SECG_EC_SECT163R1},
   { "sect163r2", SEC_OID_SECG_EC_SECT163R2},
@@ -500,16 +501,19 @@ static CurveNameTagPair nameTagPair[] =
   { "secp112r2", SEC_OID_SECG_EC_SECP112R2},
   { "secp128r1", SEC_OID_SECG_EC_SECP128R1},
   { "secp128r2", SEC_OID_SECG_EC_SECP128R2},
 
   { "sect113r1", SEC_OID_SECG_EC_SECT113R1},
   { "sect113r2", SEC_OID_SECG_EC_SECT113R2},
   { "sect131r1", SEC_OID_SECG_EC_SECT131R1},
   { "sect131r2", SEC_OID_SECG_EC_SECT131R2},
+  { "brainpoolP256r1", SEC_OID_BRAINPOOL_EC_PRIME_256R1},
+  { "brainpoolP384r1", SEC_OID_BRAINPOOL_EC_PRIME_384R1},
+  { "brainpoolP512r1", SEC_OID_BRAINPOOL_EC_PRIME_512R1},
 };
 
 static SECItem * 
 getECParams(const char *curve)
 {
     SECItem *ecparams;
     SECOidData *oidData = NULL;
     SECOidTag curveOidTag = SEC_OID_UNKNOWN; /* default */
diff --git a/security/nss/cmd/certutil/certutil.c b/security/nss/cmd/certutil/certutil.c
--- a/security/nss/cmd/certutil/certutil.c
+++ b/security/nss/cmd/certutil/certutil.c
@@ -1214,17 +1214,18 @@ static void luG(enum usage_level ul, con
     FPS "%-20s prime192v1, prime192v2, prime192v3, \n", "");
     FPS "%-20s prime239v1, prime239v2, prime239v3, c2pnb163v1, \n", "");
     FPS "%-20s c2pnb163v2, c2pnb163v3, c2pnb176v1, c2tnb191v1, \n", "");
     FPS "%-20s c2tnb191v2, c2tnb191v3,  \n", "");
     FPS "%-20s c2pnb208w1, c2tnb239v1, c2tnb239v2, c2tnb239v3, \n", "");
     FPS "%-20s c2pnb272w1, c2pnb304w1, \n", "");
     FPS "%-20s c2tnb359w1, c2pnb368w1, c2tnb431r1, secp112r1, \n", "");
     FPS "%-20s secp112r2, secp128r1, secp128r2, sect113r1, sect113r2\n", "");
-    FPS "%-20s sect131r1, sect131r2\n", "");
+    FPS "%-20s sect131r1, sect131r2, brainpoolP256r1, brainpoolP384r1\n", "");
+    FPS "%-20s brainpoolP512r1\n", "");
 #endif /* NSS_ECC_MORE_THAN_SUITE_B */
 #endif
     FPS "%-20s Key database directory (default is ~/.netscape)\n",
         "   -d keydir");
     FPS "%-20s Cert & Key database prefix\n",
         "   -P dbprefix");
     FPS "%-20s\n"
         "%-20s PKCS #11 key Attributes.\n",
diff --git a/security/nss/cmd/certutil/keystuff.c b/security/nss/cmd/certutil/keystuff.c
--- a/security/nss/cmd/certutil/keystuff.c
+++ b/security/nss/cmd/certutil/keystuff.c
@@ -440,16 +440,19 @@ static CurveNameTagPair nameTagPair[] =
   { "secp112r2", SEC_OID_SECG_EC_SECP112R2},
   { "secp128r1", SEC_OID_SECG_EC_SECP128R1},
   { "secp128r2", SEC_OID_SECG_EC_SECP128R2},
 
   { "sect113r1", SEC_OID_SECG_EC_SECT113R1},
   { "sect113r2", SEC_OID_SECG_EC_SECT113R2},
   { "sect131r1", SEC_OID_SECG_EC_SECT131R1},
   { "sect131r2", SEC_OID_SECG_EC_SECT131R2},
+  { "brainpoolP256r1", SEC_OID_BRAINPOOL_EC_PRIME_256R1},
+  { "brainpoolP384r1", SEC_OID_BRAINPOOL_EC_PRIME_384R1},
+  { "brainpoolP512r1", SEC_OID_BRAINPOOL_EC_PRIME_512R1},
 };
 
 static SECKEYECParams * 
 getECParams(const char *curve)
 {
     SECKEYECParams *ecparams;
     SECOidData *oidData = NULL;
     SECOidTag curveOidTag = SEC_OID_UNKNOWN; /* default */
diff --git a/security/nss/cmd/ecperf/ecperf.c b/security/nss/cmd/ecperf/ecperf.c
--- a/security/nss/cmd/ecperf/ecperf.c
+++ b/security/nss/cmd/ecperf/ecperf.c
@@ -86,16 +86,19 @@ static SECOidTag ecCurve_oid_map[] = {
     SEC_OID_SECG_EC_SECT113R1,
     SEC_OID_SECG_EC_SECT113R2,
     SEC_OID_SECG_EC_SECT131R1,
     SEC_OID_SECG_EC_SECT131R2,
     SEC_OID_SECG_EC_SECT163R1,
     SEC_OID_SECG_EC_SECT193R1,
     SEC_OID_SECG_EC_SECT193R2,
     SEC_OID_SECG_EC_SECT239K1,
+    SEC_OID_EC_BRAINPOOLP256R1,
+    SEC_OID_EC_BRAINPOOLP384R1,
+    SEC_OID_EC_BRAINPOOLP512R1,
     SEC_OID_UNKNOWN	    /* ECCurve_pastLastCurve */
 };
 
 typedef SECStatus (*op_func) (void *, void *, void *);
 typedef SECStatus (*pk11_op_func) (CK_SESSION_HANDLE, void *, void *, void *);
 
 typedef struct ThreadDataStr {
     op_func op;
@@ -712,15 +715,19 @@ main(int argv, char **argc)
         ECTEST_NAMED_GFP("SECP-192R1", ECCurve_SECG_PRIME_192R1);
         ECTEST_NAMED_GFP("SECP-224K1", ECCurve_SECG_PRIME_224K1);
         ECTEST_NAMED_GFP("SECP-224R1", ECCurve_SECG_PRIME_224R1);
         ECTEST_NAMED_GFP("SECP-256K1", ECCurve_SECG_PRIME_256K1);
         ECTEST_NAMED_GFP("SECP-256R1", ECCurve_SECG_PRIME_256R1);
         ECTEST_NAMED_GFP("SECP-384R1", ECCurve_SECG_PRIME_384R1);
         ECTEST_NAMED_GFP("SECP-521R1", ECCurve_SECG_PRIME_521R1);
     }
+    ECTEST_NAMED_GFP("BrainpoolP256R1", ECCurve_BRAINPOOL_PRIME_256R1);
+    ECTEST_NAMED_GFP("BrainpoolP384R1", ECCurve_BRAINPOOL_PRIME_384R1);
+    ECTEST_NAMED_GFP("BrainpoolP512R1", ECCurve_BRAINPOOL_PRIME_512R1);
+
 
   cleanup:
     if (rv != SECSuccess) {
 	printf("Error: exiting with error value\n");
     }
     return rv;
 }
diff --git a/security/nss/lib/cryptohi/seckey.c b/security/nss/lib/cryptohi/seckey.c
--- a/security/nss/lib/cryptohi/seckey.c
+++ b/security/nss/lib/cryptohi/seckey.c
@@ -783,16 +783,22 @@ SECKEY_ECParamsToKeySize(const SECItem *
 
     case SEC_OID_SECG_EC_SECP521R1:
 	return 521;
 
     case SEC_OID_SECG_EC_SECT571K1:
     case SEC_OID_SECG_EC_SECT571R1:
 	return 571;
 
+    case SEC_OID_BRAINPOOL_EC_PRIME_256R1:
+	return 256;
+    case SEC_OID_BRAINPOOL_EC_PRIME_384R1:
+	return 384;
+    case SEC_OID_BRAINPOOL_EC_PRIME_512R1:
+	return 512;
     default:
 	PORT_SetError(SEC_ERROR_UNSUPPORTED_ELLIPTIC_CURVE);
 	return 0;
     }
 }
 
 int
 SECKEY_ECParamsToBasePointOrderLen(const SECItem *encodedParams)
@@ -929,16 +935,22 @@ SECKEY_ECParamsToBasePointOrderLen(const
 	return 418;
 
     case SEC_OID_SECG_EC_SECP521R1:
 	return 521;
 
     case SEC_OID_SECG_EC_SECT571K1:
     case SEC_OID_SECG_EC_SECT571R1:
 	return 570;
+    case SEC_OID_BRAINPOOL_EC_PRIME_256R1:
+	return 256;
+    case SEC_OID_BRAINPOOL_EC_PRIME_384R1:
+	return 384;
+    case SEC_OID_BRAINPOOL_EC_PRIME_512R1:
+	return 512;
 
     default:
 	PORT_SetError(SEC_ERROR_UNSUPPORTED_ELLIPTIC_CURVE);
 	return 0;
     }
 }
 
 /* returns key strength in bytes (not bits) */
diff --git a/security/nss/lib/freebl/ec.h b/security/nss/lib/freebl/ec.h
--- a/security/nss/lib/freebl/ec.h
+++ b/security/nss/lib/freebl/ec.h
@@ -4,10 +4,11 @@
 
 #ifndef __ec_h_
 #define __ec_h_
 
 #define EC_DEBUG                          0
 
 #define ANSI_X962_CURVE_OID_TOTAL_LEN    10
 #define SECG_CURVE_OID_TOTAL_LEN          7
+#define BRAINPOOL_CURVE_OID_TOTAL_LEN	 11
 
 #endif /* __ec_h_ */
diff --git a/security/nss/lib/freebl/ecdecode.c b/security/nss/lib/freebl/ecdecode.c
--- a/security/nss/lib/freebl/ecdecode.c
+++ b/security/nss/lib/freebl/ecdecode.c
@@ -164,16 +164,17 @@ EC_FillParams(PLArenaPool *arena, const 
     printf("Encoded params in EC_DecodeParams: ");
     for (i = 0; i < encodedParams->len; i++) {
 	    printf("%02x:", encodedParams->data[i]);
     }
     printf("\n");
 #endif
 
     if ((encodedParams->len != ANSI_X962_CURVE_OID_TOTAL_LEN) &&
+	(encodedParams->len != BRAINPOOL_CURVE_OID_TOTAL_LEN) &&
 	(encodedParams->len != SECG_CURVE_OID_TOTAL_LEN)) {
 	    PORT_SetError(SEC_ERROR_UNSUPPORTED_ELLIPTIC_CURVE);
 	    return SECFailure;
     };
 
     oid.len = encodedParams->len - 2;
     oid.data = encodedParams->data + 2;
     if ((encodedParams->data[0] != SEC_ASN1_OBJECT_ID) ||
@@ -552,16 +553,30 @@ EC_FillParams(PLArenaPool *arena, const 
     case SEC_OID_SECG_EC_SECP521R1:
 	/* Populate params for secp521r1 
 	 * (the NIST P-521 curve)
 	 */
 	CHECK_SEC_OK( gf_populate_params(ECCurve_SECG_PRIME_521R1, ec_field_GFp,
 	    params) );
 	break;
 
+
+    case SEC_OID_BRAINPOOL_EC_PRIME_256R1:
+	CHECK_SEC_OK( gf_populate_params(ECCurve_BRAINPOOL_PRIME_256R1, ec_field_GFp,
+	    params) );
+	break;
+    case SEC_OID_BRAINPOOL_EC_PRIME_384R1:
+	CHECK_SEC_OK( gf_populate_params(ECCurve_BRAINPOOL_PRIME_384R1, ec_field_GFp,
+	    params) );
+	break;
+    case SEC_OID_BRAINPOOL_EC_PRIME_512R1:
+	CHECK_SEC_OK( gf_populate_params(ECCurve_BRAINPOOL_PRIME_512R1, ec_field_GFp,
+	    params) );
+	break;
+    
     default:
 	break;
     };
 
 cleanup:
     if (!params->cofactor) {
 	PORT_SetError(SEC_ERROR_UNSUPPORTED_ELLIPTIC_CURVE);
 #if EC_DEBUG
diff --git a/security/nss/lib/freebl/ecl/ecl-curve.h b/security/nss/lib/freebl/ecl/ecl-curve.h
--- a/security/nss/lib/freebl/ecl/ecl-curve.h
+++ b/security/nss/lib/freebl/ecl/ecl-curve.h
@@ -1,110 +1,693 @@
-/* This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this
- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+/* 
+ * ***** BEGIN LICENSE BLOCK *****
+ * Version: MPL 1.1/GPL 2.0/LGPL 2.1
+ *
+ * The contents of this file are subject to the Mozilla Public License Version
+ * 1.1 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS" basis,
+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+ * for the specific language governing rights and limitations under the
+ * License.
+ *
+ * The Original Code is the elliptic curve math library.
+ *
+ * The Initial Developer of the Original Code is
+ * Sun Microsystems, Inc.
+ * Portions created by the Initial Developer are Copyright (C) 2003
+ * the Initial Developer. All Rights Reserved.
+ *
+ * Contributor(s):
+ *   Douglas Stebila <douglas@stebila.ca>, Sun Microsystems Laboratories
+ *
+ * Alternatively, the contents of this file may be used under the terms of
+ * either the GNU General Public License Version 2 or later (the "GPL"), or
+ * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+ * in which case the provisions of the GPL or the LGPL are applicable instead
+ * of those above. If you wish to allow use of your version of this file only
+ * under the terms of either the GPL or the LGPL, and not to allow others to
+ * use your version of this file under the terms of the MPL, indicate your
+ * decision by deleting the provisions above and replace them with the notice
+ * and other provisions required by the GPL or the LGPL. If you do not delete
+ * the provisions above, a recipient may use your version of this file under
+ * the terms of any one of the MPL, the GPL or the LGPL.
+ *
+ * ***** END LICENSE BLOCK ***** */
 
 #include "ecl-exp.h"
 #include <stdlib.h>
 
 #ifndef __ecl_curve_h_
 #define __ecl_curve_h_
 
-#ifdef NSS_ECC_MORE_THAN_SUITE_B
-#error This source file is for Basic ECC only .
-#endif
+/* Template * /
+static const ECCurveParams ecCurve_TEMPLATE = {
+	"Curve Name", FieldType, bits,
+	"p",
+	"a",
+	"b",
+	"x",
+	"y",
+	"order", 1
+};
+*/
 
+/* NIST prime curves */
+static const ECCurveParams ecCurve_NIST_P192 = {
+	"NIST-P192", ECField_GFp, 192,
+	"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFF",
+	"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFC",
+	"64210519E59C80E70FA7E9AB72243049FEB8DEECC146B9B1",
+	"188DA80EB03090F67CBF20EB43A18800F4FF0AFD82FF1012",
+	"07192B95FFC8DA78631011ED6B24CDD573F977A11E794811",
+	"FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22831", 1
+};
+static const ECCurveParams ecCurve_NIST_P224 = {
+	"NIST-P224", ECField_GFp, 224,
+	"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001",
+	"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFE",
+	"B4050A850C04B3ABF54132565044B0B7D7BFD8BA270B39432355FFB4",
+	"B70E0CBD6BB4BF7F321390B94A03C1D356C21122343280D6115C1D21",
+	"BD376388B5F723FB4C22DFE6CD4375A05A07476444D5819985007E34",
+	"FFFFFFFFFFFFFFFFFFFFFFFFFFFF16A2E0B8F03E13DD29455C5C2A3D", 1
+};
 static const ECCurveParams ecCurve_NIST_P256 = {
 	"NIST-P256", ECField_GFp, 256,
 	"FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF",
 	"FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC",
 	"5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B",
 	"6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296",
 	"4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5",
 	"FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551", 1
 };
-
 static const ECCurveParams ecCurve_NIST_P384 = {
 	"NIST-P384", ECField_GFp, 384,
 	"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFF",
 	"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFC",
 	"B3312FA7E23EE7E4988E056BE3F82D19181D9C6EFE8141120314088F5013875AC656398D8A2ED19D2A85C8EDD3EC2AEF",
 	"AA87CA22BE8B05378EB1C71EF320AD746E1D3B628BA79B9859F741E082542A385502F25DBF55296C3A545E3872760AB7",
 	"3617DE4A96262C6F5D9E98BF9292DC29F8F41DBD289A147CE9DA3113B5F0B8C00A60B1CE1D7E819D7A431D7C90EA0E5F",
 	"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC7634D81F4372DDF581A0DB248B0A77AECEC196ACCC52973",
 	1
 };
-
 static const ECCurveParams ecCurve_NIST_P521 = {
 	"NIST-P521", ECField_GFp, 521,
 	"01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",
 	"01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC",
 	"0051953EB9618E1C9A1F929A21A0B68540EEA2DA725B99B315F3B8B489918EF109E156193951EC7E937B1652C0BD3BB1BF073573DF883D2C34F1EF451FD46B503F00",
 	"00C6858E06B70404E9CD9E3ECB662395B4429C648139053FB521F828AF606B4D3DBAA14B5E77EFE75928FE1DC127A2FFA8DE3348B3C1856A429BF97E7E31C2E5BD66",
 	"011839296A789A3BC0045C8A5FB42C7D1BD998F54449579B446817AFBD17273E662C97EE72995EF42640C550B9013FAD0761353C7086A272C24088BE94769FD16650",
 	"01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA51868783BF2F966B7FCC0148F709A5D03BB5C9B8899C47AEBB6FB71E91386409",
 	1
 };
 
+/* NIST binary curves */
+static const ECCurveParams ecCurve_NIST_K163 = {
+	"NIST-K163", ECField_GF2m, 163,
+	"0800000000000000000000000000000000000000C9",
+	"000000000000000000000000000000000000000001",
+	"000000000000000000000000000000000000000001",
+	"02FE13C0537BBC11ACAA07D793DE4E6D5E5C94EEE8",
+	"0289070FB05D38FF58321F2E800536D538CCDAA3D9",
+	"04000000000000000000020108A2E0CC0D99F8A5EF", 2
+};
+static const ECCurveParams ecCurve_NIST_B163 = {
+	"NIST-B163", ECField_GF2m, 163,
+	"0800000000000000000000000000000000000000C9",
+	"000000000000000000000000000000000000000001",
+	"020A601907B8C953CA1481EB10512F78744A3205FD",
+	"03F0EBA16286A2D57EA0991168D4994637E8343E36",
+	"00D51FBC6C71A0094FA2CDD545B11C5C0C797324F1",
+	"040000000000000000000292FE77E70C12A4234C33", 2
+};
+static const ECCurveParams ecCurve_NIST_K233 = {
+	"NIST-K233", ECField_GF2m, 233,
+	"020000000000000000000000000000000000000004000000000000000001",
+	"000000000000000000000000000000000000000000000000000000000000",
+	"000000000000000000000000000000000000000000000000000000000001",
+	"017232BA853A7E731AF129F22FF4149563A419C26BF50A4C9D6EEFAD6126",
+	"01DB537DECE819B7F70F555A67C427A8CD9BF18AEB9B56E0C11056FAE6A3",
+	"008000000000000000000000000000069D5BB915BCD46EFB1AD5F173ABDF", 4
+};
+static const ECCurveParams ecCurve_NIST_B233 = {
+	"NIST-B233", ECField_GF2m, 233,
+	"020000000000000000000000000000000000000004000000000000000001",
+	"000000000000000000000000000000000000000000000000000000000001",
+	"0066647EDE6C332C7F8C0923BB58213B333B20E9CE4281FE115F7D8F90AD",
+	"00FAC9DFCBAC8313BB2139F1BB755FEF65BC391F8B36F8F8EB7371FD558B",
+	"01006A08A41903350678E58528BEBF8A0BEFF867A7CA36716F7E01F81052",
+	"01000000000000000000000000000013E974E72F8A6922031D2603CFE0D7", 2
+};
+static const ECCurveParams ecCurve_NIST_K283 = {
+	"NIST-K283", ECField_GF2m, 283,
+	"0800000000000000000000000000000000000000000000000000000000000000000010A1",
+	"000000000000000000000000000000000000000000000000000000000000000000000000",
+	"000000000000000000000000000000000000000000000000000000000000000000000001",
+	"0503213F78CA44883F1A3B8162F188E553CD265F23C1567A16876913B0C2AC2458492836",
+	"01CCDA380F1C9E318D90F95D07E5426FE87E45C0E8184698E45962364E34116177DD2259",
+	"01FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE9AE2ED07577265DFF7F94451E061E163C61",
+	4
+};
+static const ECCurveParams ecCurve_NIST_B283 = {
+	"NIST-B283", ECField_GF2m, 283,
+	"0800000000000000000000000000000000000000000000000000000000000000000010A1",
+	"000000000000000000000000000000000000000000000000000000000000000000000001",
+	"027B680AC8B8596DA5A4AF8A19A0303FCA97FD7645309FA2A581485AF6263E313B79A2F5",
+	"05F939258DB7DD90E1934F8C70B0DFEC2EED25B8557EAC9C80E2E198F8CDBECD86B12053",
+	"03676854FE24141CB98FE6D4B20D02B4516FF702350EDDB0826779C813F0DF45BE8112F4",
+	"03FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF90399660FC938A90165B042A7CEFADB307",
+	2
+};
+static const ECCurveParams ecCurve_NIST_K409 = {
+	"NIST-K409", ECField_GF2m, 409,
+	"02000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000001",
+	"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
+	"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
+	"0060F05F658F49C1AD3AB1890F7184210EFD0987E307C84C27ACCFB8F9F67CC2C460189EB5AAAA62EE222EB1B35540CFE9023746",
+	"01E369050B7C4E42ACBA1DACBF04299C3460782F918EA427E6325165E9EA10E3DA5F6C42E9C55215AA9CA27A5863EC48D8E0286B",
+	"007FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE5F83B2D4EA20400EC4557D5ED3E3E7CA5B4B5C83B8E01E5FCF",
+	4
+};
+static const ECCurveParams ecCurve_NIST_B409 = {
+	"NIST-B409", ECField_GF2m, 409,
+	"02000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000001",
+	"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
+	"0021A5C2C8EE9FEB5C4B9A753B7B476B7FD6422EF1F3DD674761FA99D6AC27C8A9A197B272822F6CD57A55AA4F50AE317B13545F",
+	"015D4860D088DDB3496B0C6064756260441CDE4AF1771D4DB01FFE5B34E59703DC255A868A1180515603AEAB60794E54BB7996A7",
+	"0061B1CFAB6BE5F32BBFA78324ED106A7636B9C5A7BD198D0158AA4F5488D08F38514F1FDF4B4F40D2181B3681C364BA0273C706",
+	"010000000000000000000000000000000000000000000000000001E2AAD6A612F33307BE5FA47C3C9E052F838164CD37D9A21173",
+	2
+};
+static const ECCurveParams ecCurve_NIST_K571 = {
+	"NIST-K571", ECField_GF2m, 571,
+	"080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000425",
+	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
+	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
+	"026EB7A859923FBC82189631F8103FE4AC9CA2970012D5D46024804801841CA44370958493B205E647DA304DB4CEB08CBBD1BA39494776FB988B47174DCA88C7E2945283A01C8972",
+	"0349DC807F4FBF374F4AEADE3BCA95314DD58CEC9F307A54FFC61EFC006D8A2C9D4979C0AC44AEA74FBEBBB9F772AEDCB620B01A7BA7AF1B320430C8591984F601CD4C143EF1C7A3",
+	"020000000000000000000000000000000000000000000000000000000000000000000000131850E1F19A63E4B391A8DB917F4138B630D84BE5D639381E91DEB45CFE778F637C1001",
+	4
+};
+static const ECCurveParams ecCurve_NIST_B571 = {
+	"NIST-B571", ECField_GF2m, 571,
+	"080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000425",
+	"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
+	"02F40E7E2221F295DE297117B7F3D62F5C6A97FFCB8CEFF1CD6BA8CE4A9A18AD84FFABBD8EFA59332BE7AD6756A66E294AFD185A78FF12AA520E4DE739BACA0C7FFEFF7F2955727A",
+	"0303001D34B856296C16C0D40D3CD7750A93D1D2955FA80AA5F40FC8DB7B2ABDBDE53950F4C0D293CDD711A35B67FB1499AE60038614F1394ABFA3B4C850D927E1E7769C8EEC2D19",
+	"037BF27342DA639B6DCCFFFEB73D69D78C6C27A6009CBBCA1980F8533921E8A684423E43BAB08A576291AF8F461BB2A8B3531D2F0485C19B16E2F1516E23DD3C1A4827AF1B8AC15B",
+	"03FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE661CE18FF55987308059B186823851EC7DD9CA1161DE93D5174D66E8382E9BB2FE84E47",
+	2
+};
+
+/* ANSI X9.62 prime curves */
+static const ECCurveParams ecCurve_X9_62_PRIME_192V2 = {
+	"X9.62 P-192V2", ECField_GFp, 192,
+	"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFF",
+	"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFC",
+	"CC22D6DFB95C6B25E49C0D6364A4E5980C393AA21668D953",
+	"EEA2BAE7E1497842F2DE7769CFE9C989C072AD696F48034A",
+	"6574D11D69B6EC7A672BB82A083DF2F2B0847DE970B2DE15",
+	"FFFFFFFFFFFFFFFFFFFFFFFE5FB1A724DC80418648D8DD31", 1
+};
+static const ECCurveParams ecCurve_X9_62_PRIME_192V3 = {
+	"X9.62 P-192V3", ECField_GFp, 192,
+	"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFF",
+	"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFC",
+	"22123DC2395A05CAA7423DAECCC94760A7D462256BD56916",
+	"7D29778100C65A1DA1783716588DCE2B8B4AEE8E228F1896",
+	"38A90F22637337334B49DCB66A6DC8F9978ACA7648A943B0",
+	"FFFFFFFFFFFFFFFFFFFFFFFF7A62D031C83F4294F640EC13", 1
+};
+static const ECCurveParams ecCurve_X9_62_PRIME_239V1 = {
+	"X9.62 P-239V1", ECField_GFp, 239,
+	"7FFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFF8000000000007FFFFFFFFFFF",
+	"7FFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFF8000000000007FFFFFFFFFFC",
+	"6B016C3BDCF18941D0D654921475CA71A9DB2FB27D1D37796185C2942C0A",
+	"0FFA963CDCA8816CCC33B8642BEDF905C3D358573D3F27FBBD3B3CB9AAAF",
+	"7DEBE8E4E90A5DAE6E4054CA530BA04654B36818CE226B39FCCB7B02F1AE",
+	"7FFFFFFFFFFFFFFFFFFFFFFF7FFFFF9E5E9A9F5D9071FBD1522688909D0B", 1
+};
+static const ECCurveParams ecCurve_X9_62_PRIME_239V2 = {
+	"X9.62 P-239V2", ECField_GFp, 239,
+	"7FFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFF8000000000007FFFFFFFFFFF",
+	"7FFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFF8000000000007FFFFFFFFFFC",
+	"617FAB6832576CBBFED50D99F0249C3FEE58B94BA0038C7AE84C8C832F2C",
+	"38AF09D98727705120C921BB5E9E26296A3CDCF2F35757A0EAFD87B830E7",
+	"5B0125E4DBEA0EC7206DA0FC01D9B081329FB555DE6EF460237DFF8BE4BA",
+	"7FFFFFFFFFFFFFFFFFFFFFFF800000CFA7E8594377D414C03821BC582063", 1
+};
+static const ECCurveParams ecCurve_X9_62_PRIME_239V3 = {
+	"X9.62 P-239V3", ECField_GFp, 239,
+	"7FFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFF8000000000007FFFFFFFFFFF",
+	"7FFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFF8000000000007FFFFFFFFFFC",
+	"255705FA2A306654B1F4CB03D6A750A30C250102D4988717D9BA15AB6D3E",
+	"6768AE8E18BB92CFCF005C949AA2C6D94853D0E660BBF854B1C9505FE95A",
+	"1607E6898F390C06BC1D552BAD226F3B6FCFE48B6E818499AF18E3ED6CF3",
+	"7FFFFFFFFFFFFFFFFFFFFFFF7FFFFF975DEB41B3A6057C3C432146526551", 1
+};
+
+/* ANSI X9.62 binary curves */
+static const ECCurveParams ecCurve_X9_62_CHAR2_PNB163V1 = {
+	"X9.62 C2-PNB163V1", ECField_GF2m, 163,
+	"080000000000000000000000000000000000000107",
+	"072546B5435234A422E0789675F432C89435DE5242",
+	"00C9517D06D5240D3CFF38C74B20B6CD4D6F9DD4D9",
+	"07AF69989546103D79329FCC3D74880F33BBE803CB",
+	"01EC23211B5966ADEA1D3F87F7EA5848AEF0B7CA9F",
+	"0400000000000000000001E60FC8821CC74DAEAFC1", 2
+};
+static const ECCurveParams ecCurve_X9_62_CHAR2_PNB163V2 = {
+	"X9.62 C2-PNB163V2", ECField_GF2m, 163,
+	"080000000000000000000000000000000000000107",
+	"0108B39E77C4B108BED981ED0E890E117C511CF072",
+	"0667ACEB38AF4E488C407433FFAE4F1C811638DF20",
+	"0024266E4EB5106D0A964D92C4860E2671DB9B6CC5",
+	"079F684DDF6684C5CD258B3890021B2386DFD19FC5",
+	"03FFFFFFFFFFFFFFFFFFFDF64DE1151ADBB78F10A7", 2
+};
+static const ECCurveParams ecCurve_X9_62_CHAR2_PNB163V3 = {
+	"X9.62 C2-PNB163V3", ECField_GF2m, 163,
+	"080000000000000000000000000000000000000107",
+	"07A526C63D3E25A256A007699F5447E32AE456B50E",
+	"03F7061798EB99E238FD6F1BF95B48FEEB4854252B",
+	"02F9F87B7C574D0BDECF8A22E6524775F98CDEBDCB",
+	"05B935590C155E17EA48EB3FF3718B893DF59A05D0",
+	"03FFFFFFFFFFFFFFFFFFFE1AEE140F110AFF961309", 2
+};
+static const ECCurveParams ecCurve_X9_62_CHAR2_PNB176V1 = {
+	"X9.62 C2-PNB176V1", ECField_GF2m, 176,
+	"0100000000000000000000000000000000080000000007",
+	"E4E6DB2995065C407D9D39B8D0967B96704BA8E9C90B",
+	"5DDA470ABE6414DE8EC133AE28E9BBD7FCEC0AE0FFF2",
+	"8D16C2866798B600F9F08BB4A8E860F3298CE04A5798",
+	"6FA4539C2DADDDD6BAB5167D61B436E1D92BB16A562C",
+	"00010092537397ECA4F6145799D62B0A19CE06FE26AD", 0xFF6E
+};
+static const ECCurveParams ecCurve_X9_62_CHAR2_TNB191V1 = {
+	"X9.62 C2-TNB191V1", ECField_GF2m, 191,
+	"800000000000000000000000000000000000000000000201",
+	"2866537B676752636A68F56554E12640276B649EF7526267",
+	"2E45EF571F00786F67B0081B9495A3D95462F5DE0AA185EC",
+	"36B3DAF8A23206F9C4F299D7B21A9C369137F2C84AE1AA0D",
+	"765BE73433B3F95E332932E70EA245CA2418EA0EF98018FB",
+	"40000000000000000000000004A20E90C39067C893BBB9A5", 2
+};
+static const ECCurveParams ecCurve_X9_62_CHAR2_TNB191V2 = {
+	"X9.62 C2-TNB191V2", ECField_GF2m, 191,
+	"800000000000000000000000000000000000000000000201",
+	"401028774D7777C7B7666D1366EA432071274F89FF01E718",
+	"0620048D28BCBD03B6249C99182B7C8CD19700C362C46A01",
+	"3809B2B7CC1B28CC5A87926AAD83FD28789E81E2C9E3BF10",
+	"17434386626D14F3DBF01760D9213A3E1CF37AEC437D668A",
+	"20000000000000000000000050508CB89F652824E06B8173", 4
+};
+static const ECCurveParams ecCurve_X9_62_CHAR2_TNB191V3 = {
+	"X9.62 C2-TNB191V3", ECField_GF2m, 191,
+	"800000000000000000000000000000000000000000000201",
+	"6C01074756099122221056911C77D77E77A777E7E7E77FCB",
+	"71FE1AF926CF847989EFEF8DB459F66394D90F32AD3F15E8",
+	"375D4CE24FDE434489DE8746E71786015009E66E38A926DD",
+	"545A39176196575D985999366E6AD34CE0A77CD7127B06BE",
+	"155555555555555555555555610C0B196812BFB6288A3EA3", 6
+};
+static const ECCurveParams ecCurve_X9_62_CHAR2_PNB208W1 = {
+	"X9.62 C2-PNB208W1", ECField_GF2m, 208,
+	"010000000000000000000000000000000800000000000000000007",
+	"0000000000000000000000000000000000000000000000000000",
+	"C8619ED45A62E6212E1160349E2BFA844439FAFC2A3FD1638F9E",
+	"89FDFBE4ABE193DF9559ECF07AC0CE78554E2784EB8C1ED1A57A",
+	"0F55B51A06E78E9AC38A035FF520D8B01781BEB1A6BB08617DE3",
+	"000101BAF95C9723C57B6C21DA2EFF2D5ED588BDD5717E212F9D", 0xFE48
+};
+static const ECCurveParams ecCurve_X9_62_CHAR2_TNB239V1 = {
+	"X9.62 C2-TNB239V1", ECField_GF2m, 239,
+	"800000000000000000000000000000000000000000000000001000000001",
+	"32010857077C5431123A46B808906756F543423E8D27877578125778AC76",
+	"790408F2EEDAF392B012EDEFB3392F30F4327C0CA3F31FC383C422AA8C16",
+	"57927098FA932E7C0A96D3FD5B706EF7E5F5C156E16B7E7C86038552E91D",
+	"61D8EE5077C33FECF6F1A16B268DE469C3C7744EA9A971649FC7A9616305",
+	"2000000000000000000000000000000F4D42FFE1492A4993F1CAD666E447", 4
+};
+static const ECCurveParams ecCurve_X9_62_CHAR2_TNB239V2 = {
+	"X9.62 C2-TNB239V2", ECField_GF2m, 239,
+	"800000000000000000000000000000000000000000000000001000000001",
+	"4230017757A767FAE42398569B746325D45313AF0766266479B75654E65F",
+	"5037EA654196CFF0CD82B2C14A2FCF2E3FF8775285B545722F03EACDB74B",
+	"28F9D04E900069C8DC47A08534FE76D2B900B7D7EF31F5709F200C4CA205",
+	"5667334C45AFF3B5A03BAD9DD75E2C71A99362567D5453F7FA6E227EC833",
+	"1555555555555555555555555555553C6F2885259C31E3FCDF154624522D", 6
+};
+static const ECCurveParams ecCurve_X9_62_CHAR2_TNB239V3 = {
+	"X9.62 C2-TNB239V3", ECField_GF2m, 239,
+	"800000000000000000000000000000000000000000000000001000000001",
+	"01238774666A67766D6676F778E676B66999176666E687666D8766C66A9F",
+	"6A941977BA9F6A435199ACFC51067ED587F519C5ECB541B8E44111DE1D40",
+	"70F6E9D04D289C4E89913CE3530BFDE903977D42B146D539BF1BDE4E9C92",
+	"2E5A0EAF6E5E1305B9004DCE5C0ED7FE59A35608F33837C816D80B79F461",
+	"0CCCCCCCCCCCCCCCCCCCCCCCCCCCCCAC4912D2D9DF903EF9888B8A0E4CFF", 0xA
+};
+static const ECCurveParams ecCurve_X9_62_CHAR2_PNB272W1 = {
+	"X9.62 C2-PNB272W1", ECField_GF2m, 272,
+	"010000000000000000000000000000000000000000000000000000010000000000000B",
+	"91A091F03B5FBA4AB2CCF49C4EDD220FB028712D42BE752B2C40094DBACDB586FB20",
+	"7167EFC92BB2E3CE7C8AAAFF34E12A9C557003D7C73A6FAF003F99F6CC8482E540F7",
+	"6108BABB2CEEBCF787058A056CBE0CFE622D7723A289E08A07AE13EF0D10D171DD8D",
+	"10C7695716851EEF6BA7F6872E6142FBD241B830FF5EFCACECCAB05E02005DDE9D23",
+	"000100FAF51354E0E39E4892DF6E319C72C8161603FA45AA7B998A167B8F1E629521",
+	0xFF06
+};
+static const ECCurveParams ecCurve_X9_62_CHAR2_PNB304W1 = {
+	"X9.62 C2-PNB304W1", ECField_GF2m, 304,
+	"010000000000000000000000000000000000000000000000000000000000000000000000000807",
+	"FD0D693149A118F651E6DCE6802085377E5F882D1B510B44160074C1288078365A0396C8E681",
+	"BDDB97E555A50A908E43B01C798EA5DAA6788F1EA2794EFCF57166B8C14039601E55827340BE",
+	"197B07845E9BE2D96ADB0F5F3C7F2CFFBD7A3EB8B6FEC35C7FD67F26DDF6285A644F740A2614",
+	"E19FBEB76E0DA171517ECF401B50289BF014103288527A9B416A105E80260B549FDC1B92C03B",
+	"000101D556572AABAC800101D556572AABAC8001022D5C91DD173F8FB561DA6899164443051D",
+	0xFE2E
+};
+static const ECCurveParams ecCurve_X9_62_CHAR2_TNB359V1 = {
+	"X9.62 C2-TNB359V1", ECField_GF2m, 359,
+	"800000000000000000000000000000000000000000000000000000000000000000000000100000000000000001",
+	"5667676A654B20754F356EA92017D946567C46675556F19556A04616B567D223A5E05656FB549016A96656A557",
+	"2472E2D0197C49363F1FE7F5B6DB075D52B6947D135D8CA445805D39BC345626089687742B6329E70680231988",
+	"3C258EF3047767E7EDE0F1FDAA79DAEE3841366A132E163ACED4ED2401DF9C6BDCDE98E8E707C07A2239B1B097",
+	"53D7E08529547048121E9C95F3791DD804963948F34FAE7BF44EA82365DC7868FE57E4AE2DE211305A407104BD",
+	"01AF286BCA1AF286BCA1AF286BCA1AF286BCA1AF286BC9FB8F6B85C556892C20A7EB964FE7719E74F490758D3B",
+	0x4C
+};
+static const ECCurveParams ecCurve_X9_62_CHAR2_PNB368W1 = {
+	"X9.62 C2-PNB368W1", ECField_GF2m, 368,
+	"0100000000000000000000000000000000000000000000000000000000000000000000002000000000000000000007",
+	"E0D2EE25095206F5E2A4F9ED229F1F256E79A0E2B455970D8D0D865BD94778C576D62F0AB7519CCD2A1A906AE30D",
+	"FC1217D4320A90452C760A58EDCD30C8DD069B3C34453837A34ED50CB54917E1C2112D84D164F444F8F74786046A",
+	"1085E2755381DCCCE3C1557AFA10C2F0C0C2825646C5B34A394CBCFA8BC16B22E7E789E927BE216F02E1FB136A5F",
+	"7B3EB1BDDCBA62D5D8B2059B525797FC73822C59059C623A45FF3843CEE8F87CD1855ADAA81E2A0750B80FDA2310",
+	"00010090512DA9AF72B08349D98A5DD4C7B0532ECA51CE03E2D10F3B7AC579BD87E909AE40A6F131E9CFCE5BD967",
+	0xFF70
+};
+static const ECCurveParams ecCurve_X9_62_CHAR2_TNB431R1 = {
+	"X9.62 C2-TNB431R1", ECField_GF2m, 431,
+	"800000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000001",
+	"1A827EF00DD6FC0E234CAF046C6A5D8A85395B236CC4AD2CF32A0CADBDC9DDF620B0EB9906D0957F6C6FEACD615468DF104DE296CD8F",
+	"10D9B4A3D9047D8B154359ABFB1B7F5485B04CEB868237DDC9DEDA982A679A5A919B626D4E50A8DD731B107A9962381FB5D807BF2618",
+	"120FC05D3C67A99DE161D2F4092622FECA701BE4F50F4758714E8A87BBF2A658EF8C21E7C5EFE965361F6C2999C0C247B0DBD70CE6B7",
+	"20D0AF8903A96F8D5FA2C255745D3C451B302C9346D9B7E485E7BCE41F6B591F3E8F6ADDCBB0BC4C2F947A7DE1A89B625D6A598B3760",
+	"0340340340340340340340340340340340340340340340340340340323C313FAB50589703B5EC68D3587FEC60D161CC149C1AD4A91",
+	0x2760
+};
+
+/* SEC2 prime curves */
+static const ECCurveParams ecCurve_SECG_PRIME_112R1 = {
+	"SECP-112R1", ECField_GFp, 112,
+	"DB7C2ABF62E35E668076BEAD208B",
+	"DB7C2ABF62E35E668076BEAD2088",
+	"659EF8BA043916EEDE8911702B22",
+	"09487239995A5EE76B55F9C2F098",
+	"A89CE5AF8724C0A23E0E0FF77500",
+	"DB7C2ABF62E35E7628DFAC6561C5", 1
+};
+static const ECCurveParams ecCurve_SECG_PRIME_112R2 = {
+	"SECP-112R2", ECField_GFp, 112,
+	"DB7C2ABF62E35E668076BEAD208B",
+	"6127C24C05F38A0AAAF65C0EF02C",
+	"51DEF1815DB5ED74FCC34C85D709",
+	"4BA30AB5E892B4E1649DD0928643",
+	"adcd46f5882e3747def36e956e97",
+	"36DF0AAFD8B8D7597CA10520D04B", 4
+};
+static const ECCurveParams ecCurve_SECG_PRIME_128R1 = {
+	"SECP-128R1", ECField_GFp, 128,
+	"FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFF",
+	"FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFC",
+	"E87579C11079F43DD824993C2CEE5ED3",
+	"161FF7528B899B2D0C28607CA52C5B86",
+	"CF5AC8395BAFEB13C02DA292DDED7A83",
+	"FFFFFFFE0000000075A30D1B9038A115", 1
+};
+static const ECCurveParams ecCurve_SECG_PRIME_128R2 = {
+	"SECP-128R2", ECField_GFp, 128,
+	"FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFF",
+	"D6031998D1B3BBFEBF59CC9BBFF9AEE1",
+	"5EEEFCA380D02919DC2C6558BB6D8A5D",
+	"7B6AA5D85E572983E6FB32A7CDEBC140",
+	"27B6916A894D3AEE7106FE805FC34B44",
+	"3FFFFFFF7FFFFFFFBE0024720613B5A3", 4
+};
+static const ECCurveParams ecCurve_SECG_PRIME_160K1 = {
+	"SECP-160K1", ECField_GFp, 160,
+	"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFAC73",
+	"0000000000000000000000000000000000000000",
+	"0000000000000000000000000000000000000007",
+	"3B4C382CE37AA192A4019E763036F4F5DD4D7EBB",
+	"938CF935318FDCED6BC28286531733C3F03C4FEE",
+	"0100000000000000000001B8FA16DFAB9ACA16B6B3", 1
+};
+static const ECCurveParams ecCurve_SECG_PRIME_160R1 = {
+	"SECP-160R1", ECField_GFp, 160,
+	"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFF",
+	"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFC",
+	"1C97BEFC54BD7A8B65ACF89F81D4D4ADC565FA45",
+	"4A96B5688EF573284664698968C38BB913CBFC82",
+	"23A628553168947D59DCC912042351377AC5FB32",
+	"0100000000000000000001F4C8F927AED3CA752257", 1
+};
+static const ECCurveParams ecCurve_SECG_PRIME_160R2 = {
+	"SECP-160R2", ECField_GFp, 160,
+	"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFAC73",
+	"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFAC70",
+	"B4E134D3FB59EB8BAB57274904664D5AF50388BA",
+	"52DCB034293A117E1F4FF11B30F7199D3144CE6D",
+	"FEAFFEF2E331F296E071FA0DF9982CFEA7D43F2E",
+	"0100000000000000000000351EE786A818F3A1A16B", 1
+};
+static const ECCurveParams ecCurve_SECG_PRIME_192K1 = {
+	"SECP-192K1", ECField_GFp, 192,
+	"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFEE37",
+	"000000000000000000000000000000000000000000000000",
+	"000000000000000000000000000000000000000000000003",
+	"DB4FF10EC057E9AE26B07D0280B7F4341DA5D1B1EAE06C7D",
+	"9B2F2F6D9C5628A7844163D015BE86344082AA88D95E2F9D",
+	"FFFFFFFFFFFFFFFFFFFFFFFE26F2FC170F69466A74DEFD8D", 1
+};
+static const ECCurveParams ecCurve_SECG_PRIME_224K1 = {
+	"SECP-224K1", ECField_GFp, 224,
+	"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFE56D",
+	"00000000000000000000000000000000000000000000000000000000",
+	"00000000000000000000000000000000000000000000000000000005",
+	"A1455B334DF099DF30FC28A169A467E9E47075A90F7E650EB6B7A45C",
+	"7E089FED7FBA344282CAFBD6F7E319F7C0B0BD59E2CA4BDB556D61A5",
+	"010000000000000000000000000001DCE8D2EC6184CAF0A971769FB1F7", 1
+};
+static const ECCurveParams ecCurve_SECG_PRIME_256K1 = {
+	"SECP-256K1", ECField_GFp, 256,
+	"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F",
+	"0000000000000000000000000000000000000000000000000000000000000000",
+	"0000000000000000000000000000000000000000000000000000000000000007",
+	"79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798",
+	"483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8",
+	"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141", 1
+};
+
+/* SEC2 binary curves */
+static const ECCurveParams ecCurve_SECG_CHAR2_113R1 = {
+	"SECT-113R1", ECField_GF2m, 113,
+	"020000000000000000000000000201",
+	"003088250CA6E7C7FE649CE85820F7",
+	"00E8BEE4D3E2260744188BE0E9C723",
+	"009D73616F35F4AB1407D73562C10F",
+	"00A52830277958EE84D1315ED31886",
+	"0100000000000000D9CCEC8A39E56F", 2
+};
+static const ECCurveParams ecCurve_SECG_CHAR2_113R2 = {
+	"SECT-113R2", ECField_GF2m, 113,
+	"020000000000000000000000000201",
+	"00689918DBEC7E5A0DD6DFC0AA55C7",
+	"0095E9A9EC9B297BD4BF36E059184F",
+	"01A57A6A7B26CA5EF52FCDB8164797",
+	"00B3ADC94ED1FE674C06E695BABA1D",
+	"010000000000000108789B2496AF93", 2
+};
+static const ECCurveParams ecCurve_SECG_CHAR2_131R1 = {
+	"SECT-131R1", ECField_GF2m, 131,
+	"080000000000000000000000000000010D",
+	"07A11B09A76B562144418FF3FF8C2570B8",
+	"0217C05610884B63B9C6C7291678F9D341",
+	"0081BAF91FDF9833C40F9C181343638399",
+	"078C6E7EA38C001F73C8134B1B4EF9E150",
+	"0400000000000000023123953A9464B54D", 2
+};
+static const ECCurveParams ecCurve_SECG_CHAR2_131R2 = {
+	"SECT-131R2", ECField_GF2m, 131,
+	"080000000000000000000000000000010D",
+	"03E5A88919D7CAFCBF415F07C2176573B2",
+	"04B8266A46C55657AC734CE38F018F2192",
+	"0356DCD8F2F95031AD652D23951BB366A8",
+	"0648F06D867940A5366D9E265DE9EB240F",
+	"0400000000000000016954A233049BA98F", 2
+};
+static const ECCurveParams ecCurve_SECG_CHAR2_163R1 = {
+	"SECT-163R1", ECField_GF2m, 163,
+	"0800000000000000000000000000000000000000C9",
+	"07B6882CAAEFA84F9554FF8428BD88E246D2782AE2",
+	"0713612DCDDCB40AAB946BDA29CA91F73AF958AFD9",
+	"0369979697AB43897789566789567F787A7876A654",
+	"00435EDB42EFAFB2989D51FEFCE3C80988F41FF883",
+	"03FFFFFFFFFFFFFFFFFFFF48AAB689C29CA710279B", 2
+};
+static const ECCurveParams ecCurve_SECG_CHAR2_193R1 = {
+	"SECT-193R1", ECField_GF2m, 193,
+	"02000000000000000000000000000000000000000000008001",
+	"0017858FEB7A98975169E171F77B4087DE098AC8A911DF7B01",
+	"00FDFB49BFE6C3A89FACADAA7A1E5BBC7CC1C2E5D831478814",
+	"01F481BC5F0FF84A74AD6CDF6FDEF4BF6179625372D8C0C5E1",
+	"0025E399F2903712CCF3EA9E3A1AD17FB0B3201B6AF7CE1B05",
+	"01000000000000000000000000C7F34A778F443ACC920EBA49", 2
+};
+static const ECCurveParams ecCurve_SECG_CHAR2_193R2 = {
+	"SECT-193R2", ECField_GF2m, 193,
+	"02000000000000000000000000000000000000000000008001",
+	"0163F35A5137C2CE3EA6ED8667190B0BC43ECD69977702709B",
+	"00C9BB9E8927D4D64C377E2AB2856A5B16E3EFB7F61D4316AE",
+	"00D9B67D192E0367C803F39E1A7E82CA14A651350AAE617E8F",
+	"01CE94335607C304AC29E7DEFBD9CA01F596F927224CDECF6C",
+	"010000000000000000000000015AAB561B005413CCD4EE99D5", 2
+};
+static const ECCurveParams ecCurve_SECG_CHAR2_239K1 = {
+	"SECT-239K1", ECField_GF2m, 239,
+	"800000000000000000004000000000000000000000000000000000000001",
+	"000000000000000000000000000000000000000000000000000000000000",
+	"000000000000000000000000000000000000000000000000000000000001",
+	"29A0B6A887A983E9730988A68727A8B2D126C44CC2CC7B2A6555193035DC",
+	"76310804F12E549BDB011C103089E73510ACB275FC312A5DC6B76553F0CA",
+	"2000000000000000000000000000005A79FEC67CB6E91F1C1DA800E478A5", 4
+};
+
+/* WTLS curves */
+static const ECCurveParams ecCurve_WTLS_1 = {
+	"WTLS-1", ECField_GF2m, 113,
+	"020000000000000000000000000201",
+	"000000000000000000000000000001",
+	"000000000000000000000000000001",
+	"01667979A40BA497E5D5C270780617",
+	"00F44B4AF1ECC2630E08785CEBCC15",
+	"00FFFFFFFFFFFFFFFDBF91AF6DEA73", 2
+};
+static const ECCurveParams ecCurve_WTLS_8 = {
+	"WTLS-8", ECField_GFp, 112,
+	"FFFFFFFFFFFFFFFFFFFFFFFFFDE7",
+	"0000000000000000000000000000",
+	"0000000000000000000000000003",
+	"0000000000000000000000000001",
+	"0000000000000000000000000002",
+	"0100000000000001ECEA551AD837E9", 1
+};
+static const ECCurveParams ecCurve_WTLS_9 = {
+	"WTLS-9", ECField_GFp, 160,
+	"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC808F",
+	"0000000000000000000000000000000000000000",
+	"0000000000000000000000000000000000000003",
+	"0000000000000000000000000000000000000001",
+	"0000000000000000000000000000000000000002",
+	"0100000000000000000001CDC98AE0E2DE574ABF33", 1
+};
+
+static const ECCurveParams ecCurve_BRAINPOOL_PRIME_256R1 = {
+	"brainpoolP256r1", ECField_GFp, 256,
+	"A9FB57DBA1EEA9BC3E660A909D838D726E3BF623D52620282013481D1F6E5377",
+	"7D5A0975FC2C3057EEF67530417AFFE7FB8055C126DC5C6CE94A4B44F330B5D9",
+	"26DC5C6CE94A4B44F330B5D9BBD77CBF958416295CF7E1CE6BCCDC18FF8C07B6",
+	"8BD2AEB9CB7E57CB2C4B482FFC81B7AFB9DE27E1E3BD23C23A4453BD9ACE3262",
+	"547EF835C3DAC4FD97F8461A14611DC9C27745132DED8E545C1D54C72F046997",
+	"A9FB57DBA1EEA9BC3E660A909D838D718C397AA3B561A6F7901E0E82974856A7", 1
+};
+
+static const ECCurveParams ecCurve_BRAINPOOL_PRIME_384R1 = {
+	"brainpoolP384r1", ECField_GFp, 384,
+	"8CB91E82A3386D280F5D6F7E50E641DF152F7109ED5456B412B1DA197FB71123ACD3A729901D1A71874700133107EC53",
+	"7BC382C63D8C150C3C72080ACE05AFA0C2BEA28E4FB22787139165EFBA91F90F8AA5814A503AD4EB04A8C7DD22CE2826",
+	"04A8C7DD22CE28268B39B55416F0447C2FB77DE107DCD2A62E880EA53EEB62D57CB4390295DBC9943AB78696FA504C11",
+	"1D1C64F068CF45FFA2A63A81B7C13F6B8847A3E77EF14FE3DB7FCAFE0CBD10E8E826E03436D646AAEF87B2E247D4AF1E",
+	"8ABE1D7520F9C2A45CB1EB8E95CFD55262B70B29FEEC5864E19C054FF99129280E4646217791811142820341263C5315",
+	"8CB91E82A3386D280F5D6F7E50E641DF152F7109ED5456B31F166E6CAC0425A7CF3AB6AF6B7FC3103B883202E9046565", 1
+};
+
+static const ECCurveParams ecCurve_BRAINPOOL_PRIME_512R1 = {
+	"brainpoolP512r1", ECField_GFp, 512,
+	"AADD9DB8DBE9C48B3FD4E6AE33C9FC07CB308DB3B3C9D20ED6639CCA703308717D4D9B009BC66842AECDA12AE6A380E62881FF2F2D82C68528AA6056583A48F3",
+	"7830A3318B603B89E2327145AC234CC594CBDD8D3DF91610A83441CAEA9863BC2DED5D5AA8253AA10A2EF1C98B9AC8B57F1117A72BF2C7B9E7C1AC4D77FC94CA",
+	"3DF91610A83441CAEA9863BC2DED5D5AA8253AA10A2EF1C98B9AC8B57F1117A72BF2C7B9E7C1AC4D77FC94CADC083E67984050B75EBAE5DD2809BD638016F723",
+	"81AEE4BDD82ED9645A21322E9C4C6A9385ED9F70B5D916C1B43B62EEF4D0098EFF3B1F78E2D0D48D50D1687B93B97D5F7C6D5047406A5E688B352209BCB9F822",
+	"7DDE385D566332ECC0EABFA9CF7822FDF209F70024A57B1AA000C55B881F8111B2DCDE494A5F485E5BCA4BD88A2763AED1CA2B2FA8F0540678CD1E0F3AD80892",
+	"AADD9DB8DBE9C48B3FD4E6AE33C9FC07CB308DB3B3C9D20ED6639CCA70330870553E5C414CA92619418661197FAC10471DB1D381085DDADDB58796829CA90069", 1
+};
+
 /* mapping between ECCurveName enum and pointers to ECCurveParams */
 static const ECCurveParams *ecCurve_map[] = {
-	NULL,			/* ECCurve_noName */
-	NULL,			/* ECCurve_NIST_P192 */
-	NULL,			/* ECCurve_NIST_P224 */
-	&ecCurve_NIST_P256,	/* ECCurve_NIST_P256 */
-	&ecCurve_NIST_P384,	/* ECCurve_NIST_P384 */
-	&ecCurve_NIST_P521,	/* ECCurve_NIST_P521 */
-	NULL,			/* ECCurve_NIST_K163 */
-	NULL,			/* ECCurve_NIST_B163 */
-	NULL,			/* ECCurve_NIST_K233 */
-	NULL,			/* ECCurve_NIST_B233 */
-	NULL,			/* ECCurve_NIST_K283 */
-	NULL,			/* ECCurve_NIST_B283 */
-	NULL,			/* ECCurve_NIST_K409 */
-	NULL,			/* ECCurve_NIST_B409 */
-	NULL,			/* ECCurve_NIST_K571 */
-	NULL,			/* ECCurve_NIST_B571 */
-	NULL,			/* ECCurve_X9_62_PRIME_192V2 */
-	NULL,			/* ECCurve_X9_62_PRIME_192V3 */
-	NULL,			/* ECCurve_X9_62_PRIME_239V1 */
-	NULL,			/* ECCurve_X9_62_PRIME_239V2 */
-	NULL,			/* ECCurve_X9_62_PRIME_239V3 */
-	NULL,			/* ECCurve_X9_62_CHAR2_PNB163V1 */
-	NULL,			/* ECCurve_X9_62_CHAR2_PNB163V2 */
-	NULL,			/* ECCurve_X9_62_CHAR2_PNB163V3 */
-	NULL,			/* ECCurve_X9_62_CHAR2_PNB176V1 */
-	NULL,			/* ECCurve_X9_62_CHAR2_TNB191V1 */
-	NULL,			/* ECCurve_X9_62_CHAR2_TNB191V2 */
-	NULL,			/* ECCurve_X9_62_CHAR2_TNB191V3 */
-	NULL,			/* ECCurve_X9_62_CHAR2_PNB208W1 */
-	NULL,			/* ECCurve_X9_62_CHAR2_TNB239V1 */
-	NULL,			/* ECCurve_X9_62_CHAR2_TNB239V2 */
-	NULL,			/* ECCurve_X9_62_CHAR2_TNB239V3 */
-	NULL,			/* ECCurve_X9_62_CHAR2_PNB272W1 */
-	NULL,			/* ECCurve_X9_62_CHAR2_PNB304W1 */
-	NULL,			/* ECCurve_X9_62_CHAR2_TNB359V1 */
-	NULL,			/* ECCurve_X9_62_CHAR2_PNB368W1 */
-	NULL,			/* ECCurve_X9_62_CHAR2_TNB431R1 */
-	NULL,			/* ECCurve_SECG_PRIME_112R1 */
-	NULL,			/* ECCurve_SECG_PRIME_112R2 */
-	NULL,			/* ECCurve_SECG_PRIME_128R1 */
-	NULL,			/* ECCurve_SECG_PRIME_128R2 */
-	NULL,			/* ECCurve_SECG_PRIME_160K1 */
-	NULL,			/* ECCurve_SECG_PRIME_160R1 */
-	NULL,			/* ECCurve_SECG_PRIME_160R2 */
-	NULL,			/* ECCurve_SECG_PRIME_192K1 */
-	NULL,			/* ECCurve_SECG_PRIME_224K1 */
-	NULL,			/* ECCurve_SECG_PRIME_256K1 */
-	NULL,			/* ECCurve_SECG_CHAR2_113R1 */
-	NULL,			/* ECCurve_SECG_CHAR2_113R2 */
-	NULL,			/* ECCurve_SECG_CHAR2_131R1 */
-	NULL,			/* ECCurve_SECG_CHAR2_131R2 */
-	NULL,			/* ECCurve_SECG_CHAR2_163R1 */
-	NULL,			/* ECCurve_SECG_CHAR2_193R1 */
-	NULL,			/* ECCurve_SECG_CHAR2_193R2 */
-	NULL,			/* ECCurve_SECG_CHAR2_239K1 */
-	NULL,			/* ECCurve_WTLS_1 */
-	NULL,			/* ECCurve_WTLS_8 */
-	NULL,			/* ECCurve_WTLS_9 */
-	NULL			/* ECCurve_pastLastCurve */
+	NULL,						/* ECCurve_noName */
+	&ecCurve_NIST_P192,			/* ECCurve_NIST_P192 */
+	&ecCurve_NIST_P224,			/* ECCurve_NIST_P224 */
+	&ecCurve_NIST_P256,			/* ECCurve_NIST_P256 */
+	&ecCurve_NIST_P384,			/* ECCurve_NIST_P384 */
+	&ecCurve_NIST_P521,			/* ECCurve_NIST_P521 */
+	&ecCurve_NIST_K163,			/* ECCurve_NIST_K163 */
+	&ecCurve_NIST_B163,			/* ECCurve_NIST_B163 */
+	&ecCurve_NIST_K233,			/* ECCurve_NIST_K233 */
+	&ecCurve_NIST_B233,			/* ECCurve_NIST_B233 */
+	&ecCurve_NIST_K283,			/* ECCurve_NIST_K283 */
+	&ecCurve_NIST_B283,			/* ECCurve_NIST_B283 */
+	&ecCurve_NIST_K409,			/* ECCurve_NIST_K409 */
+	&ecCurve_NIST_B409,			/* ECCurve_NIST_B409 */
+	&ecCurve_NIST_K571,			/* ECCurve_NIST_K571 */
+	&ecCurve_NIST_B571,			/* ECCurve_NIST_B571 */
+	&ecCurve_X9_62_PRIME_192V2,	/* ECCurve_X9_62_PRIME_192V2 */
+	&ecCurve_X9_62_PRIME_192V3,	/* ECCurve_X9_62_PRIME_192V3 */
+	&ecCurve_X9_62_PRIME_239V1,	/* ECCurve_X9_62_PRIME_239V1 */
+	&ecCurve_X9_62_PRIME_239V2,	/* ECCurve_X9_62_PRIME_239V2 */
+	&ecCurve_X9_62_PRIME_239V3,	/* ECCurve_X9_62_PRIME_239V3 */
+	&ecCurve_X9_62_CHAR2_PNB163V1,	/* ECCurve_X9_62_CHAR2_PNB163V1 */
+	&ecCurve_X9_62_CHAR2_PNB163V2,	/* ECCurve_X9_62_CHAR2_PNB163V2 */
+	&ecCurve_X9_62_CHAR2_PNB163V3,	/* ECCurve_X9_62_CHAR2_PNB163V3 */
+	&ecCurve_X9_62_CHAR2_PNB176V1,	/* ECCurve_X9_62_CHAR2_PNB176V1 */
+	&ecCurve_X9_62_CHAR2_TNB191V1,	/* ECCurve_X9_62_CHAR2_TNB191V1 */
+	&ecCurve_X9_62_CHAR2_TNB191V2,	/* ECCurve_X9_62_CHAR2_TNB191V2 */
+	&ecCurve_X9_62_CHAR2_TNB191V3,	/* ECCurve_X9_62_CHAR2_TNB191V3 */
+	&ecCurve_X9_62_CHAR2_PNB208W1,	/* ECCurve_X9_62_CHAR2_PNB208W1 */
+	&ecCurve_X9_62_CHAR2_TNB239V1,	/* ECCurve_X9_62_CHAR2_TNB239V1 */
+	&ecCurve_X9_62_CHAR2_TNB239V2,	/* ECCurve_X9_62_CHAR2_TNB239V2 */
+	&ecCurve_X9_62_CHAR2_TNB239V3,	/* ECCurve_X9_62_CHAR2_TNB239V3 */
+	&ecCurve_X9_62_CHAR2_PNB272W1,	/* ECCurve_X9_62_CHAR2_PNB272W1 */
+	&ecCurve_X9_62_CHAR2_PNB304W1,	/* ECCurve_X9_62_CHAR2_PNB304W1 */
+	&ecCurve_X9_62_CHAR2_TNB359V1,	/* ECCurve_X9_62_CHAR2_TNB359V1 */
+	&ecCurve_X9_62_CHAR2_PNB368W1,	/* ECCurve_X9_62_CHAR2_PNB368W1 */
+	&ecCurve_X9_62_CHAR2_TNB431R1,	/* ECCurve_X9_62_CHAR2_TNB431R1 */
+	&ecCurve_SECG_PRIME_112R1,	/* ECCurve_SECG_PRIME_112R1 */
+	&ecCurve_SECG_PRIME_112R2,	/* ECCurve_SECG_PRIME_112R2 */
+	&ecCurve_SECG_PRIME_128R1,	/* ECCurve_SECG_PRIME_128R1 */
+	&ecCurve_SECG_PRIME_128R2,	/* ECCurve_SECG_PRIME_128R2 */
+	&ecCurve_SECG_PRIME_160K1,	/* ECCurve_SECG_PRIME_160K1 */
+	&ecCurve_SECG_PRIME_160R1,	/* ECCurve_SECG_PRIME_160R1 */
+	&ecCurve_SECG_PRIME_160R2,	/* ECCurve_SECG_PRIME_160R2 */
+	&ecCurve_SECG_PRIME_192K1,	/* ECCurve_SECG_PRIME_192K1 */
+	&ecCurve_SECG_PRIME_224K1,	/* ECCurve_SECG_PRIME_224K1 */
+	&ecCurve_SECG_PRIME_256K1,	/* ECCurve_SECG_PRIME_256K1 */
+	&ecCurve_SECG_CHAR2_113R1,	/* ECCurve_SECG_CHAR2_113R1 */
+	&ecCurve_SECG_CHAR2_113R2,	/* ECCurve_SECG_CHAR2_113R2 */
+	&ecCurve_SECG_CHAR2_131R1,	/* ECCurve_SECG_CHAR2_131R1 */
+	&ecCurve_SECG_CHAR2_131R2,	/* ECCurve_SECG_CHAR2_131R2 */
+	&ecCurve_SECG_CHAR2_163R1,	/* ECCurve_SECG_CHAR2_163R1 */
+	&ecCurve_SECG_CHAR2_193R1,	/* ECCurve_SECG_CHAR2_193R1 */
+	&ecCurve_SECG_CHAR2_193R2,	/* ECCurve_SECG_CHAR2_193R2 */
+	&ecCurve_SECG_CHAR2_239K1,	/* ECCurve_SECG_CHAR2_239K1 */
+	&ecCurve_WTLS_1,			/* ECCurve_WTLS_1 */
+	&ecCurve_WTLS_8,			/* ECCurve_WTLS_8 */
+	&ecCurve_WTLS_9,			/* ECCurve_WTLS_9 */
+	&ecCurve_BRAINPOOL_PRIME_256R1,		/* ECCurve_BRAINPOOL_PRIME_256R1 */
+	&ecCurve_BRAINPOOL_PRIME_384R1,		/* ECCurve_BRAINPOOL_PRIME_384R1 */
+	&ecCurve_BRAINPOOL_PRIME_512R1,		/* ECCurve_BRAINPOOL_PRIME_512R1 */
+	NULL						/* ECCurve_pastLastCurve */
 };
 
 #endif
diff --git a/security/nss/lib/freebl/ecl/ecl-exp.h b/security/nss/lib/freebl/ecl/ecl-exp.h
--- a/security/nss/lib/freebl/ecl/ecl-exp.h
+++ b/security/nss/lib/freebl/ecl/ecl-exp.h
@@ -122,16 +122,19 @@ typedef enum {
 	/* ECCurve_WTLS_5 == ECCurve_X9_62_CHAR2_PNB163V1 */
 	/* ECCurve_WTLS_6 == ECCurve_SECG_PRIME_112R1 */
 	/* ECCurve_WTLS_7 == ECCurve_SECG_PRIME_160R1 */
 	ECCurve_WTLS_8,
 	ECCurve_WTLS_9,
 	/* ECCurve_WTLS_10 == ECCurve_NIST_K233 */
 	/* ECCurve_WTLS_11 == ECCurve_NIST_B233 */
 	/* ECCurve_WTLS_12 == ECCurve_NIST_P224 */
+	ECCurve_BRAINPOOL_PRIME_256R1,
+	ECCurve_BRAINPOOL_PRIME_384R1,
+	ECCurve_BRAINPOOL_PRIME_512R1,
 
 	ECCurve_pastLastCurve
 } ECCurveName;
 
 /* Aliased named curves */
 
 #define ECCurve_X9_62_PRIME_192V1 ECCurve_NIST_P192
 #define ECCurve_X9_62_PRIME_256V1 ECCurve_NIST_P256
diff --git a/security/nss/lib/freebl/ecl/ecl-priv.h b/security/nss/lib/freebl/ecl/ecl-priv.h
--- a/security/nss/lib/freebl/ecl/ecl-priv.h
+++ b/security/nss/lib/freebl/ecl/ecl-priv.h
@@ -104,16 +104,19 @@ struct GFMethodStr {
 	void *extra1;
 	void *extra2;
 	void (*extra_free) (GFMethod *meth);
 };
 
 /* Construct generic GFMethods. */
 GFMethod *GFMethod_consGFp(const mp_int *irr);
 GFMethod *GFMethod_consGFp_mont(const mp_int *irr);
+#ifdef ECL_ENABLE_GFP_PT_MUL_AFF
+GFMethod *GFMethod_consGFp_aff(const mp_int *irr);
+#endif
 GFMethod *GFMethod_consGF2m(const mp_int *irr,
 							const unsigned int irr_arr[5]);
 /* Free the memory allocated (if any) to a GFMethod object. */
 void GFMethod_free(GFMethod *meth);
 
 struct ECGroupStr {
 	/* Indicates whether the structure was constructed from dynamic memory 
 	 * or statically created. */
diff --git a/security/nss/lib/freebl/ecl/ecl.c b/security/nss/lib/freebl/ecl/ecl.c
--- a/security/nss/lib/freebl/ecl/ecl.c
+++ b/security/nss/lib/freebl/ecl/ecl.c
@@ -83,16 +83,63 @@ ECGroup_consGFp(const mp_int *irr, const
   CLEANUP:
 	if (res != MP_OKAY) {
 		ECGroup_free(group);
 		return NULL;
 	}
 	return group;
 }
 
+#ifdef ECL_ENABLE_GFP_PT_MUL_AFF
+/* Construct a generic ECGroup for elliptic curves over prime fields using affine multiplication */
+/* Useful simple case to troubleshoot arithmetic errors.  */
+ECGroup *
+ECGroup_consGFp_aff(const mp_int *irr, const mp_int *curvea,
+				const mp_int *curveb, const mp_int *genx,
+				const mp_int *geny, const mp_int *order, int cofactor)
+{
+	mp_err res = MP_OKAY;
+	ECGroup *group = NULL;
+
+	group = ECGroup_new();
+	if (group == NULL)
+		return NULL;
+
+	group->meth = GFMethod_consGFp(irr);
+	if (group->meth == NULL) {
+		res = MP_MEM;
+		goto CLEANUP;
+	}
+	/* use generic subtraction methods */
+	group->meth->field_sub = &ec_GFp_sub;
+
+	MP_CHECKOK(mp_copy(curvea, &group->curvea));
+	MP_CHECKOK(mp_copy(curveb, &group->curveb));
+	MP_CHECKOK(mp_copy(genx, &group->genx));
+	MP_CHECKOK(mp_copy(geny, &group->geny));
+	MP_CHECKOK(mp_copy(order, &group->order));
+	group->cofactor = cofactor;
+	group->point_add = &ec_GFp_pt_add_aff;
+	group->point_sub = &ec_GFp_pt_sub_aff;
+	group->point_dbl = &ec_GFp_pt_dbl_aff;
+	group->point_mul = &ec_GFp_pt_mul_aff;
+	group->base_point_mul = NULL;
+	group->points_mul = &ec_pts_mul_basic;
+	group->validate_point = &ec_GFp_validate_point;
+
+  CLEANUP:
+	if (res != MP_OKAY) {
+		ECGroup_free(group);
+		return NULL;
+	}
+	return group;
+}
+#endif
+
+
 /* Construct a generic ECGroup for elliptic curves over prime fields with
  * field arithmetic implemented in Montgomery coordinates. */
 ECGroup *
 ECGroup_consGFp_mont(const mp_int *irr, const mp_int *curvea,
 					 const mp_int *curveb, const mp_int *genx,
 					 const mp_int *geny, const mp_int *order, int cofactor)
 {
 	mp_err res = MP_OKAY;
@@ -251,16 +298,25 @@ ecgroup_fromNameAndHex(const ECCurveName
 #else
 			group =
 				ECGroup_consGFp(&irr, &curvea, &curveb, &genx, &geny,
 								&order, params->cofactor);
 			if (group == NULL) { res = MP_UNDEF; goto CLEANUP; }
 			MP_CHECKOK(ec_group_set_gfp224(group, name));
 #endif
 			break;
+		/* special case for brainpoolR384r1 curve breaking ec_GFp_sub_6 function */
+		case ECCurve_BRAINPOOL_PRIME_384R1:
+			group =
+				ECGroup_consGFp_mont(&irr, &curvea, &curveb, &genx, &geny,
+				&order, params->cofactor);
+			if (group == NULL) { res = MP_UNDEF; goto CLEANUP; }
+			/* use generic subtraction methods */
+			group->meth->field_sub = &ec_GFp_sub;
+			break;
 #endif /* NSS_ECC_MORE_THAN_SUITE_B */
 		case ECCurve_SECG_PRIME_256R1:
 			group =
 				ECGroup_consGFp(&irr, &curvea, &curveb, &genx, &geny,
 								&order, params->cofactor);
 			if (group == NULL) { res = MP_UNDEF; goto CLEANUP; }
 			MP_CHECKOK(ec_group_set_gfp256(group, name));
 			MP_CHECKOK(ec_group_set_gfp256_32(group, name));
diff --git a/security/nss/lib/freebl/ecl/ecl_mult.c b/security/nss/lib/freebl/ecl/ecl_mult.c
--- a/security/nss/lib/freebl/ecl/ecl_mult.c
+++ b/security/nss/lib/freebl/ecl/ecl_mult.c
@@ -17,17 +17,21 @@ ECPoint_mul(const ECGroup *group, const 
 			const mp_int *py, mp_int *rx, mp_int *ry)
 {
 	mp_err res = MP_OKAY;
 	mp_int kt;
 
 	ARGCHK((k != NULL) && (group != NULL), MP_BADARG);
 	MP_DIGITS(&kt) = 0;
 
-	/* want scalar to be less than or equal to group order */
+	/* want scalar to be less than group order 
+	   so we actually perform the ec_GFp_validate_point 
+	   step 4. multiplication
+	   mozilla bug 329575
+	   */
 	if (mp_cmp(k, &group->order) > 0) {
 		MP_CHECKOK(mp_init(&kt));
 		MP_CHECKOK(mp_mod(k, &group->order, &kt));
 	} else {
 		MP_SIGN(&kt) = MP_ZPOS;
 		MP_USED(&kt) = MP_USED(k);
 		MP_ALLOC(&kt) = MP_ALLOC(k);
 		MP_DIGITS(&kt) = MP_DIGITS(k);
diff --git a/security/nss/lib/freebl/ecl/tests/ecp_test.c b/security/nss/lib/freebl/ecl/tests/ecp_test.c
--- a/security/nss/lib/freebl/ecl/tests/ecp_test.c
+++ b/security/nss/lib/freebl/ecl/tests/ecp_test.c
@@ -410,16 +410,19 @@ main(int argv, char **argc)
 	ECTEST_NAMED_GFP("SECP-256R1", ECCurve_SECG_PRIME_256R1);
 	ECTEST_NAMED_GFP("SECP-384R1", ECCurve_SECG_PRIME_384R1);
 	ECTEST_NAMED_GFP("SECP-521R1", ECCurve_SECG_PRIME_521R1);
 	ECTEST_NAMED_GFP("WTLS-6 (112)", ECCurve_WTLS_6);
 	ECTEST_NAMED_GFP("WTLS-7 (160)", ECCurve_WTLS_7);
 	ECTEST_NAMED_GFP("WTLS-8 (112)", ECCurve_WTLS_8);
 	ECTEST_NAMED_GFP("WTLS-9 (160)", ECCurve_WTLS_9);
 	ECTEST_NAMED_GFP("WTLS-12 (224)", ECCurve_WTLS_12);
+	ECTEST_NAMED_GFP("Brainpool-P256R1", ECCurve_BRAINPOOL_PRIME_256R1);
+	ECTEST_NAMED_GFP("Brainpool-P384R1", ECCurve_BRAINPOOL_PRIME_384R1);
+	ECTEST_NAMED_GFP("Brainpool-P512R1", ECCurve_BRAINPOOL_PRIME_512R1);
 
   CLEANUP:
 	EC_FreeCurveParams(params);
 	ECGroup_free(group);
 	if (res != MP_OKAY) {
 		printf("Error: exiting with error value %i\n", res);
 	}
 	return res;
diff --git a/security/nss/lib/pk11wrap/pk11akey.c b/security/nss/lib/pk11wrap/pk11akey.c
--- a/security/nss/lib/pk11wrap/pk11akey.c
+++ b/security/nss/lib/pk11wrap/pk11akey.c
@@ -322,35 +322,39 @@ pk11_get_EC_PointLenInBytes(PLArenaPool 
     case SEC_OID_ANSIX962_EC_PRIME239V2:
     case SEC_OID_ANSIX962_EC_PRIME239V3:
     case SEC_OID_ANSIX962_EC_C2TNB239V1:
     case SEC_OID_ANSIX962_EC_C2TNB239V2:
     case SEC_OID_ANSIX962_EC_C2TNB239V3:
 	return 61; /*curve len in bytes = 30 bytes */
     case SEC_OID_ANSIX962_EC_PRIME256V1:
     case SEC_OID_SECG_EC_SECP256K1:
+    case SEC_OID_BRAINPOOL_EC_PRIME_256R1:
 	return 65; /*curve len in bytes = 32 bytes */
     case SEC_OID_ANSIX962_EC_C2PNB272W1:
 	return 69; /*curve len in bytes = 34 bytes */
     case SEC_OID_SECG_EC_SECT283K1:
     case SEC_OID_SECG_EC_SECT283R1:
 	return 73; /*curve len in bytes = 36 bytes */
     case SEC_OID_ANSIX962_EC_C2PNB304W1:
 	return 77; /*curve len in bytes = 38 bytes */
     case SEC_OID_ANSIX962_EC_C2TNB359V1:
 	return 91; /*curve len in bytes = 45 bytes */
     case SEC_OID_ANSIX962_EC_C2PNB368W1:
 	return 93; /*curve len in bytes = 46 bytes */
     case SEC_OID_SECG_EC_SECP384R1:
+    case SEC_OID_BRAINPOOL_EC_PRIME_384R1:
 	return 97; /*curve len in bytes = 48 bytes */
     case SEC_OID_SECG_EC_SECT409K1:
     case SEC_OID_SECG_EC_SECT409R1:
 	return 105; /*curve len in bytes = 52 bytes */
     case SEC_OID_ANSIX962_EC_C2TNB431R1:
 	return 109; /*curve len in bytes = 54 bytes */
+    case SEC_OID_BRAINPOOL_EC_PRIME_512R1:
+	return 129; /*curve len in bytes = 64 bytes */
     case SEC_OID_SECG_EC_SECP521R1:
 	return 133; /*curve len in bytes = 66 bytes */
     case SEC_OID_SECG_EC_SECT571K1:
     case SEC_OID_SECG_EC_SECT571R1:
 	return 145; /*curve len in bytes = 72 bytes */
     /* unknown or unrecognized OIDs. return unknown length */
     default:
 	break;
diff --git a/security/nss/lib/ssl/ssl3ecc.c b/security/nss/lib/ssl/ssl3ecc.c
--- a/security/nss/lib/ssl/ssl3ecc.c
+++ b/security/nss/lib/ssl/ssl3ecc.c
@@ -77,16 +77,19 @@ static const SECOidTag ecName2OIDTag[] =
         SEC_OID_SECG_EC_SECP192K1,  /* 18 */
         SEC_OID_SECG_EC_SECP192R1,  /* 19 */
         SEC_OID_SECG_EC_SECP224K1,  /* 20 */
         SEC_OID_SECG_EC_SECP224R1,  /* 21 */
         SEC_OID_SECG_EC_SECP256K1,  /* 22 */
         SEC_OID_SECG_EC_SECP256R1,  /* 23 */
         SEC_OID_SECG_EC_SECP384R1,  /* 24 */
         SEC_OID_SECG_EC_SECP521R1,  /* 25 */
+        SEC_OID_BRAINPOOL_EC_PRIME_256R1, /* 26 */
+        SEC_OID_BRAINPOOL_EC_PRIME_384R1, /* 27 */
+        SEC_OID_BRAINPOOL_EC_PRIME_512R1, /* 28 */
 };
 
 static const PRUint16 curve2bits[] = {
           0, /*  ec_noName     = 0,   */
         163, /*  ec_sect163k1  = 1,   */
         163, /*  ec_sect163r1  = 2,   */
         163, /*  ec_sect163r2  = 3,   */
         193, /*  ec_sect193r1  = 4,   */
@@ -106,16 +109,19 @@ static const PRUint16 curve2bits[] = {
         192, /*  ec_secp192k1  = 18,  */
         192, /*  ec_secp192r1  = 19,  */
         224, /*  ec_secp224k1  = 20,  */
         224, /*  ec_secp224r1  = 21,  */
         256, /*  ec_secp256k1  = 22,  */
         256, /*  ec_secp256r1  = 23,  */
         384, /*  ec_secp384r1  = 24,  */
         521, /*  ec_secp521r1  = 25,  */
+        256, /*  ec_brainpoolP256r1 = 26  */
+        384, /*  ec_brainpoolP384r1 = 27  */
+        512, /*  ec_brainpoolP512r1 = 28  */
       65535  /*  ec_pastLastName      */
 };
 
 typedef struct Bits2CurveStr {
     PRUint16    bits;
     ECName      curve;
 } Bits2Curve;
 
@@ -132,21 +138,24 @@ static const Bits2Curve bits2curve [] = 
    {    193,     ec_sect193r2    /*  = 5,   */       },
    {    224,     ec_secp224r1    /*  = 21,  fast */  },
    {    224,     ec_secp224k1    /*  = 20,  */       },
    {    233,     ec_sect233k1    /*  = 6,   */       },
    {    233,     ec_sect233r1    /*  = 7,   */       },
    {    239,     ec_sect239k1    /*  = 8,   */       },
    {    256,     ec_secp256r1    /*  = 23,  fast */  },
    {    256,     ec_secp256k1    /*  = 22,  */       },
+   {    256,     ec_brainpoolP256r1   /*  = 26,  */  },
    {    283,     ec_sect283k1    /*  = 9,   */       },
    {    283,     ec_sect283r1    /*  = 10,  */       },
    {    384,     ec_secp384r1    /*  = 24,  fast */  },
+   {    384,     ec_brainpoolP384r1   /*  = 27,  */  },
    {    409,     ec_sect409k1    /*  = 11,  */       },
    {    409,     ec_sect409r1    /*  = 12,  */       },
+   {    512,     ec_brainpoolP512r1   /*  = 28,  */  },
    {    521,     ec_secp521r1    /*  = 25,  fast */  },
    {    571,     ec_sect571k1    /*  = 13,  */       },
    {    571,     ec_sect571r1    /*  = 14,  */       },
    {  65535,     ec_noName    }
 };
 
 typedef struct ECDHEKeyPairStr {
     ssl3KeyPair *  pair;
@@ -1058,46 +1067,48 @@ static const PRUint8 suiteBECList[12] = 
     BE( 8),         /* octets that follow ( 3 pairs + 1 length pair) */
     BE( 6),         /* octets that follow ( 3 pairs) */
     BE(23), BE(24), BE(25)
 };
 
 /* Prefabricated TLS client hello extension, Elliptic Curves List,
  * offers curves 1-25.
  */
-static const PRUint8 tlsECList[56] = {
+static const PRUint8 tlsECList[62] = {
     BE(10),         /* Extension type */
-    BE(52),         /* octets that follow (25 pairs + 1 length pair) */
-    BE(50),         /* octets that follow (25 pairs) */
+    BE(58),         /* octets that follow (28 pairs + 1 length pair) */
+    BE(56),         /* octets that follow (28 pairs) */
             BE( 1), BE( 2), BE( 3), BE( 4), BE( 5), BE( 6), BE( 7),
     BE( 8), BE( 9), BE(10), BE(11), BE(12), BE(13), BE(14), BE(15),
     BE(16), BE(17), BE(18), BE(19), BE(20), BE(21), BE(22), BE(23),
-    BE(24), BE(25)
+    BE(24), BE(25), BE(26), BE(27), BE(28)
 };
 
 static const PRUint8 ecPtFmt[6] = {
     BE(11),         /* Extension type */
     BE( 2),         /* octets that follow */
              1,     /* octets that follow */
                  0  /* uncompressed type only */
 };
 
 /* This function already presumes we can do ECC, ssl3_IsECCEnabled must be
  * called before this function. It looks to see if we have a token which
- * is capable of doing smaller than SuiteB curves. If the token can, we
+ * is capable of doing non-SuiteB sized curves. If the token can, we
  * presume the token can do the whole SSL suite of curves. If it can't we
  * presume the token that allowed ECC to be enabled can only do suite B
  * curves. */
 static PRBool
 ssl3_SuiteBOnly(sslSocket *ss)
 {
-    /* See if we can support small curves (like 163). If not, assume we can
-     * only support Suite-B curves (P-256, P-384, P-521). */
+
+    /* See if we can support non-suiteB curves key sizes (like 283). 
+     * If not, assume we can only support Suite-B curves (P-256, P-384, P-521). 
+     * Minimum key size is now 256 bit */
     PK11SlotInfo *slot =
-        PK11_GetBestSlotWithAttributes(CKM_ECDH1_DERIVE, 0, 163,
+        PK11_GetBestSlotWithAttributes(CKM_ECDH1_DERIVE, 0, 283,
                                        ss ? ss->pkcs11PinArg : NULL);
 
     if (!slot) {
         /* nope, presume we can only do suite B */
         return PR_TRUE;
     }
     /* we can, presume we can do all curves */
     PK11_FreeSlot(slot);
diff --git a/security/nss/lib/ssl/sslimpl.h b/security/nss/lib/ssl/sslimpl.h
--- a/security/nss/lib/ssl/sslimpl.h
+++ b/security/nss/lib/ssl/sslimpl.h
@@ -138,17 +138,17 @@ typedef enum { SSLAppOpRead = 0,
 #define SSL_NUM_WRAP_MECHS              16
 
 /* This makes the cert cache entry exactly 4k. */
 #define SSL_MAX_CACHED_CERT_LEN		4060
 
 #define NUM_MIXERS                      9
 
 /* Mask of the 25 named curves we support. */
-#define SSL3_ALL_SUPPORTED_CURVES_MASK 0x3fffffe
+#define SSL3_ALL_SUPPORTED_CURVES_MASK 0x4000001
 /* Mask of only 3 curves, suite B */
 #define SSL3_SUITE_B_SUPPORTED_CURVES_MASK 0x3800000
 
 #ifndef BPB
 #define BPB 8 /* Bits Per Byte */
 #endif
 
 #define EXPORT_RSA_KEY_LENGTH 64	/* bytes */
@@ -1642,16 +1642,19 @@ typedef enum { ec_noName     = 0,
 	       ec_secp192k1  = 18,
 	       ec_secp192r1  = 19, 
 	       ec_secp224k1  = 20, 
 	       ec_secp224r1  = 21,
 	       ec_secp256k1  = 22, 
 	       ec_secp256r1  = 23, 
 	       ec_secp384r1  = 24,
 	       ec_secp521r1  = 25,
+	       ec_brainpoolP256r1 = 26,
+	       ec_brainpoolP384r1 = 27,
+	       ec_brainpoolP512r1 = 28,
 	       ec_pastLastName
 } ECName;
 
 extern SECStatus ssl3_ECName2Params(PLArenaPool *arena, ECName curve,
 				   SECKEYECParams *params);
 ECName	ssl3_GetCurveWithECKeyStrength(PRUint32 curvemsk, int requiredECCbits);
 
 
diff --git a/security/nss/lib/util/secoid.c b/security/nss/lib/util/secoid.c
--- a/security/nss/lib/util/secoid.c
+++ b/security/nss/lib/util/secoid.c
@@ -580,16 +580,27 @@ CONST_OID secgECsect571k1[] = {SECG_OID,
 CONST_OID secgECsect571r1[] = {SECG_OID, 0x27 };
 
 CONST_OID seed_CBC[]				= { SEED_OID, 4 };
 
 CONST_OID evIncorporationLocality[]     = { EV_NAME_ATTRIBUTE, 1 };
 CONST_OID evIncorporationState[]        = { EV_NAME_ATTRIBUTE, 2 };
 CONST_OID evIncorporationCountry[]      = { EV_NAME_ATTRIBUTE, 3 };
 
+
+/* brainpool OID RFC 5639*/
+#define TELETRUST_OID				0x2B, 0x24
+#define EC_STD_CURVES_AND_GENERATION_OID	TELETRUST_OID, 0x3, 0x3, 0x2, 0x8
+#define BRAINPOOL_ELLIPTIC_CURVE_OID		EC_STD_CURVES_AND_GENERATION_OID, 0x1
+#define BRAINPOOL_VERSION_ONE			BRAINPOOL_ELLIPTIC_CURVE_OID, 0x1
+
+CONST_OID brainpoolP256r1[] = { BRAINPOOL_VERSION_ONE, 0x7 };
+CONST_OID brainpoolP384r1[] = { BRAINPOOL_VERSION_ONE, 0xB };
+CONST_OID brainpoolP512r1[] = { BRAINPOOL_VERSION_ONE, 0xD };
+
 #define OI(x) { siDEROID, (unsigned char *)x, sizeof x }
 #ifndef SECOID_NO_STRINGS
 #define OD(oid,tag,desc,mech,ext) { OI(oid), tag, desc, mech, ext }
 #else
 #define OD(oid,tag,desc,mech,ext) { OI(oid), tag, 0, mech, ext }
 #endif
 
 #if defined(NSS_ALLOW_UNSUPPORTED_CRITICAL)
@@ -1643,17 +1654,23 @@ const static SECOidData oids[SEC_OID_TOT
 	SEC_OID_NIST_DSA_SIGNATURE_WITH_SHA256_DIGEST,
 	"DSA with SHA-256 Signature",
 	CKM_INVALID_MECHANISM /* not yet defined */, INVALID_CERT_EXTENSION),
     OD( msExtendedKeyUsageTrustListSigning, 
         SEC_OID_MS_EXT_KEY_USAGE_CTL_SIGNING,
         "Microsoft Trust List Signing",
 	CKM_INVALID_MECHANISM, INVALID_CERT_EXTENSION ),
     OD( x520Name, SEC_OID_AVA_NAME,
-    	"X520 Name",    CKM_INVALID_MECHANISM, INVALID_CERT_EXTENSION )
+    	"X520 Name",    CKM_INVALID_MECHANISM, INVALID_CERT_EXTENSION ),
+    OD( brainpoolP256r1, SEC_OID_BRAINPOOL_EC_PRIME_256R1, 
+	"brainpoolP256r1", CKM_INVALID_MECHANISM, INVALID_CERT_EXTENSION ),
+    OD( brainpoolP384r1, SEC_OID_BRAINPOOL_EC_PRIME_384R1, 
+	"brainpoolP384r1", CKM_INVALID_MECHANISM, INVALID_CERT_EXTENSION ),
+    OD( brainpoolP512r1, SEC_OID_BRAINPOOL_EC_PRIME_512R1, 
+	"brainpoolP512r1", CKM_INVALID_MECHANISM, INVALID_CERT_EXTENSION ),
 };
 
 /* PRIVATE EXTENDED SECOID Table
  * This table is private. Its structure is opaque to the outside.
  * It is indexed by the same SECOidTag as the oids table above.
  * Every member of this struct must have accessor functions (set, get)
  * and those functions must operate by value, not by reference.
  * The addresses of the contents of this table must not be exposed 
diff --git a/security/nss/lib/util/secoidt.h b/security/nss/lib/util/secoidt.h
--- a/security/nss/lib/util/secoidt.h
+++ b/security/nss/lib/util/secoidt.h
@@ -438,16 +438,21 @@ typedef enum {
      * szOID_KP_CTL_USAGE_SIGNING 
      * where KP stands for Key Purpose
      */
     SEC_OID_MS_EXT_KEY_USAGE_CTL_SIGNING    = 316,
 
     /* The 'name' attribute type in X.520 */
     SEC_OID_AVA_NAME                        = 317,
 
+    /* brainpool cure OIDs */
+    SEC_OID_BRAINPOOL_EC_PRIME_256R1	    = 318,
+    SEC_OID_BRAINPOOL_EC_PRIME_384R1	    = 319,
+    SEC_OID_BRAINPOOL_EC_PRIME_512R1	    = 320,
+
     SEC_OID_TOTAL
 } SECOidTag;
 
 #define SEC_OID_SECG_EC_SECP192R1 SEC_OID_ANSIX962_EC_PRIME192V1
 #define SEC_OID_SECG_EC_SECP256R1 SEC_OID_ANSIX962_EC_PRIME256V1
 #define SEC_OID_PKCS12_KEY_USAGE  SEC_OID_X509_KEY_USAGE
 
 /* fake OID for DSS sign/verify */
